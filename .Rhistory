met688 <- read_html("https://www.bu.edu/academics/met/courses/met-cs-688")
aaa <- html_nodes(met688, '.cf-course') %>% html_text()
aaa
install.packages("rvest")
install.packages("rvest")
library(rvest)
install.packages("xml2")
install.packages("xml2")
library(rvest)
library(rvest)
met688 <- read_html("https://www.bu.edu/academics/met/courses/met-cs-688")
met688
class(met688)
class(met688)
too big to show
#b<- html_nodes(met688, '.container')%>% html_text()
#b
install.packages("rvest")
library(rvest)
met688 <- read_html("https://www.bu.edu/academics/met/courses/met-cs-688")
met688
class(met688)
met688 <- read_html("https://www.bu.edu/academics/met/courses/met-cs-688")
aaa <- html_nodes(met688, '.cf-course') %>% html_text()
aaa
b<- html_nodes(met688, '.container')%>% html_text()
b
library(xml2)
install.packages("rvest")
library(rvest)
library(xml2)
install.packages("rvest")
library(rvest)
library(xml2)
Covid19_webpg <- read_html("https://scholar.google.com/scholar?hl=en&as_sdt=0%2C22&q=covid-19+articles&btnG=")
Covid19_webpg %>%
html_node("title") %>%
html_text()
Covid19_webpg %>%
html_nodes("span.gs_ct2") %>%
html_text
Covid19_webpg %>%
html_nodes("gs_ct2") %>%
html_text
Covid19_webpg %>%
html_nodes("gs_ri") %>%
html_text
Covid19_webpg %>%
html_nodes("gs_ri") %>%
html_text()
Covid19_webpg %>%
html_nodes("gs_rt") %>%
html_text()
Covid19_webpg %>%
html_nodes("div.gs_rt") %>%
html_text()
Covid19_webpg %>%
html_nodes("span.gs_ct2") %>%
html_text()
Covid19_webpg %>%
html_nodes(".a") %>%
html_text()
Covid19_webpg %>%
html_nodes("a") %>%
html_text()
Covid19_webpg <- read_html("https://pubmed.ncbi.nlm.nih.gov/?term=Covid_19")
Covid19_webpg %>%
html_node("title") %>%
html_text()
Covid19_webpg %>%
html_nodes(".docsum-title") %>%
html_text()
Covid19_webpg %>%
html_nodes("#id_term") %>%
html_text()
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
Covid19_webpg %>%
html_nodes("#id_term") %>%
html_text()
Covid19_webpg <- read_html("https://pubmed.ncbi.nlm.nih.gov/?term=Covid_19")
install.packages("rvest")
library(rvest)
Covid19_webpg <- read_html("https://pubmed.ncbi.nlm.nih.gov/?term=Covid_19")
Covid19_webpg %>%
html_node("title") %>%
html_text()
Covid19_webpg %>%
html_nodes("#id_term") %>%
html_text()
Covid19_webpg <- read_html("https://news.google.com/topstories?hl=en-US&gl=US&ceid=US:en")
Covid19_webpg %>%
html_node("title") %>%
html_text()
Covid19_webpg %>%
html_nodes(".lzaFib") %>%
html_text()
Covid19_webpg <- read_html("https://news.google.com/topics/CAAqBwgKMJy5lwswj-KuAw?hl=en-US&gl=US&ceid=US%3Aen")
Covid19_webpg %>%
html_node("title") %>%
html_text()
Covid19_webpg <- read_html("https://www.cdc.gov/mmwr/Novel_Coronavirus_Reports.html")
Covid19_webpg %>%
html_node("title") %>%
html_text()
Covid19_webpg %>%
html_nodes("li:nth-child(1) a") %>%
html_text()
Covid19_webpg %>%
html_nodes("title") %>%
html_text()
Covid19_webpg %>%
html_nodes("col-md-12") %>%
html_text()
Covid19_webpg %>%
html_nodes("a") %>%
html_text()
Covid19_webpg %>%
html_nodes("li a") %>%
html_text()
Covid19_webpg %>%
html_nodes("li a") %>%
html_text()
Covid19_webpg %>%
html_nodes("p") %>%
html_text()
Covid19_webpg %>%
html_nodes("ul") %>%
html_text()
Covid19_webpg %>%
html_nodes("ul") %>%
html_text()
Covid19_webpg %>%
html_nodes("li") %>%
html_text()
Covid19_webpg %>%
html_nodes("li") %>%
html_text()
Covid19_webpg %>%
html_nodes(".li") %>%
html_text()
Covid19_webpg %>%
html_nodes("li") %>%
html_text()
Covid19_webpg %>%
html_nodes("a href") %>%
html_text()
Covid19_webpg %>%
html_nodes(".a href") %>%
html_text()
Covid19_webpg %>%
html_nodes("a") %>%
html_text()
install.packages("ISLR")
data
library("ISLR")
ummary(default)
summary(default)
library(ISLR)
attach(Auto)
data("Auto")
data
mpg01 <- rep(0,length(Auto$mpg))
mpg01[Auto$mpg > median(Auto$mpg)] <- 1
Auto <- data.frame(Auto, mpg01)
summary(Auto)
head(Auto)
#1b)
cor(Auto[,-9])
pairs(Auto[,-9])
par(mfrow=c(2,3))
boxplot(mpg01 ~ cylinders, data = Auto, main = "mpg01 vs. Cylinders")
boxplot(mpg01 ~ displacement, data = Auto, main = "mpg01 vs. Displacement")
boxplot(mpg01 ~ horsepower, data = Auto, main = "mpg01 vs. Horsepower")
boxplot(mpg01 ~ weight, data = Auto, main = "mpg01 vs. Weight")
boxplot(mpg01 ~ acceleration, data = Auto, main = "mpg01 vs. Acceleration")
boxplot(mpg01 ~ year, data = Auto, main = "mpg01 vs. Year")
mtext("Boxplots for cars", outer = TRUE, line = -3)
par(mfrow=c(2,3))
boxplot(mpg01 ~ cylinders, data = Auto, main = "mpg01 vs. Cylinders")
boxplot(mpg01 ~ displacement, data = Auto, main = "mpg01 vs. Displacement")
boxplot(mpg01 ~ horsepower, data = Auto, main = "mpg01 vs. Horsepower")
boxplot(mpg01 ~ weight, data = Auto, main = "mpg01 vs. Weight")
boxplot(mpg01 ~ acceleration, data = Auto, main = "mpg01 vs. Acceleration")
boxplot(mpg01 ~ year, data = Auto, main = "mpg01 vs. Year")
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs mpg01")
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs. mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs. mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs. mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs. mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs. mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs. mpg01")
mtext = ("Boxplots for cars",outer = TRUE, line = -3)
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs. mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs. mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs. mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs. mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs. mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs. mpg01")
mtext = ("Boxplots for cars", outer = TRUE, line = -3)
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs. mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs. mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs. mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs. mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs. mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs. mpg01")
mtext = ("Boxplots for cars" outer = TRUE, line = -3)
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs. mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs. mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs. mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs. mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs. mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs. mpg01")
mtext("Boxplots for cars", outer = TRUE, line = -3)
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs. mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs. mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs. mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs. mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs. mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs. mpg01")
mtext("Boxplots for cars", outer = TRUE, line = -2)
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs. mpg01")
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs. mpg01")
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs. mpg01")
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs. mpg01")
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs. mpg01")
boxplot(year ~ mpg01, data = Auto, main = "Year vs. mpg01")
mtext("Boxplots for cars", outer = TRUE, line = -1)
set.seed(123)
train <- sample(1: dim(Auto)[1], dim(Auto)[1] * .8, rep = FALSE)
test <- train
trainingSet <- Auto[train, ]
testSet=Auto[test, ]
mpg01.test <- mpg01[test]
set.seed(123)
train <- sample(1: dim(Auto)[1], dim(Auto)[1] * .8, rep = FALSE)
test <- -train
trainingSet <- Auto[train, ]
testSet=Auto[test, ]
mpg01.test <- mpg01[test]
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = biomial,
subset = train)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit,
Auto.test,
type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred! = mpg01.test)
library(MASS)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit,
Auto.test,
type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred! = mpg01.test)
library(class)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit,
Auto.test,
type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred ! = mpg01.test)
library(MASS)
install.packages("MASS")
library(MASS)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit,
Auto.test,
type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred ! = mpg01.test)
glm.probs <- predict(glm.fit, Auto.test,type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred ! = mpg01.test)
glm.probs <- predict(glm.fit, Auto.test, type = "response")
glm.probs <- predict(glm.fit, testSet, type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred ! = mpg01.test)
mean(glm.pred != mpg01.test)
library(MASS)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit, testSet, type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != mpg01.test)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit, testSet, type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != mpg01.test)
set.seed(123)
train <- sample(1: dim(Auto)[1], dim(Auto)[1] * .8, rep = FALSE)
test <- -train
trainingSet <- Auto[train, ]
testSet=Auto[test, ]
mpg01.test <- mpg01[test]
library(MASS)
glm.fit <- glm(mpg01 ~ cylinders + displacement + horsepower + weight,
data = Auto,
family = binomial,
subset = train)
summary(glm.fit)
glm.probs <- predict(glm.fit, testSet, type = "response")
glm.pred <- rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != mpg01.test)
data(weekly)
library(ISLR)
library(ISLR)
data(weekly)
data(Weekly)
summary(Weekly)
library(corrplot)
summary(Weekly)
corrplot(cor(Weekly[,-9]), method = "square")
corrplot(cor(Weekly[,-9]), method = "square",
title = "The Correlational Plot of Weekly Data")
corrplot(cor(Weekly[,-9]), method = "square",
title = "The Correlational Plot of Weekly Data")
corrplot(cor(Weekly[,-9]), method = "square",
title = "The Correlational Plot of Weekly Data", line = -1)
corrplot(cor(Weekly[,-9]), method = "square",
title = "The Correlational Plot of Weekly Data",
outer = TRUE,line = -1)
corrplot(cor(Weekly[,-9]), method = "square",
title = "The Correlational Plot of Weekly Data")
corrplot(cor(Weekly[,-9]), method = "square",
title = "The Correlational Plot of Weekly Data")
cor(Weekly[-9])
corrplot(cor(Weekly[,-9]), method = "square",diag = FALSE,
title = "The Correlational Plot of Weekly Data")
corrplot(cor(Weekly[,-9]), method = "square",
title="The Correlational Plot of Weekly Data")
corrplot(cor(Weekly[,-9]), method = "square",
title="The Correlational Plot of Weekly Data")
library(corrplot)
summary(Weekly)
cor(Weekly[-9])
corrplot(cor(Weekly[,-9]), method = "square",
title="The Correlational Plot of Weekly Data")
logmodel <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
data = Weekly,
family = binomial)
summary(logmodel)
logmodel.probs = predict(logmodel, type = "response")
logmodel.pred = rep("Down", 1089)
logmodel.pred[logmodel.probs > 0.5] <- "Up"
table(logmodel.pred, Weekly$Direction)
mean(logmodel.pred == Weekly$Direction)
logmodel.probs = predict(logmodel, type = "response")
logmodel.pred = rep("Down", 1089)
logmodel.pred[logmodel.probs > 0.5] <- "Up"
table(logmodel.pred, Weekly$Direction)
mean(logmodel.pred == Weekly$Direction)
train <- (Weekly$Year < 2009)
Weekly_train <- Weekly[train,]
Weekly_test <- Weekly[!train,]
Direction_train <- Weekly_train$Direction
Direction_test <- Weekly_test$Direction
log <- glm(Direction ~ Lag2, data = Weekly, family = binomial,subset = train)
summary(log)
log_probs <- predict(log, Weekly_test, type = "response")
log_pred = rep("Down", length(Direction_test))
log_pred[log_probs > 0.5] <- "Up"
table(log_pred, Direction_test)
mean(log_pred == Direction_test)
train <- (Weekly$Year < 2009)
Weekly_train <- Weekly[train,]
Weekly_test <- Weekly[!train,]
Direction_train <- Weekly_train$Direction
Direction_test <- Weekly_test$Direction
log <- glm(Direction ~ Lag2, data = Weekly, family = binomial,subset = train)
summary(log)
log_probs <- predict(log, Weekly_test, type = "response")
log_pred = rep("Down", length(Direction_test))
log_pred[log_probs > 0.5] <- "Up"
table(log_pred, Direction_test)
mean(log_pred == Direction_test)
library(MASS);library(car);library(corrplot)
library(funr);library(openxlsx);library(dplyr)
library(caret);library(psych);library(plyr)
library(ggplot2);library(zoo);library(lmtest)
library(graphics)
install.packages("plyr")
library(plyr)
library(MASS);library(car);library(corrplot)
library(funr);library(openxlsx);library(dplyr)
library(caret);library(psych);library(plyr)
library(ggplot2);library(zoo);library(lmtest)
library(graphics)
getwd()
df <- read.table("housing.data", header = FALSE, sep = "")
n1 <- read.fwf("housing.names", skip = 30, n = 17, widths = c(-7,8,-60))
#Extract&Remove spaces
n2 <- as.character(n1[-c(3,6,15),])
n2 <- gsub(" ", "", n2)
#Assign the column names(n2) to df
names(df) <- n2
setwd("/Users/zhangluyu/Desktop/CS555_Term Project")
getwd()
setwd("/Users/zhangluyu/Desktop/CS555_Term Project")
df <- read.table("housing.data", header = FALSE, sep = "")
n1 <- read.fwf("housing.names", skip = 30, n = 17, widths = c(-7,8,-60))
#Extract&Remove spaces
n2 <- as.character(n1[-c(3,6,15),])
n2 <- gsub(" ", "", n2)
#Assign the column names(n2) to df
names(df) <- n2
## Step 2: Import data
df <- read.csv("housingdata.csv",header = T)
train <- df[1:400,]
test <- df[-(1:400),]
train<-train[order(train$mortality),]
View(df)
sum(is.na(df))
write.csv(df,"/Users/zhangluyu/Desktop/CS555_Term Project/housingdata.csv", row.names = FALSE)
getwd()
setwd("/Users/zhangluyu/Desktop/CS555_Term Project")
df <- read.table("housing.data", header = FALSE, sep = "")
n1 <- read.fwf("housing.names", skip = 30, n = 17, widths = c(-7,8,-60))
#Extract&Remove spaces
n2 <- as.character(n1[-c(3,6,15),])
n2 <- gsub(" ", "", n2)
#Assign the column names(n2) to df
names(df) <- n2
df <- read.csv("housingdata.csv",header = T)
train <- df[1:400,]
test <- df[-(1:400),]
View(df)
sum(is.na(df))
write.csv(df,"/Users/zhangluyu/Desktop/CS555_Term Project/housingdata.csv", row.names = FALSE)
cor<-cor(df$MEDV,df[c("CRIM","ZN","INDUS","CHAS","NOX","RM","AGE","DIS","RAD","TAX","PTRATIO","B","LSTAT","MEDV")])
corrplot(cor(df), method="number", type = "upper", diag = FALSE)
lm1<-lm(MEDV~CRIM+ZN+INDUS+CHAS+NOX+RM+AGE+DIS+RAD+TAX+PTRATIO+B+LSTAT,data=df)
summary(lm1)
lm2<-lm(MEDV~INDUS+RM+NOX+TAX+PTRATIO+LSTAT,data=df)
summary(lm2)
layout(matrix(c(1,2,3,4),2,2))
plot(lm2)
anova(lm1,lm2)
train.pred <- predict(lm2,se.fit=TRUE)
par(mfrow=c(1,1))
plot(train$MEDV,col="lightblue",
pch=15,xlab=expression("num"),ylab="MEDV",
main="Fitting results of MEDV")
lines(train.pred$fit,col="blue")
par(mfrow=c(1,1))
test.pred <- predict(lm1,newdata= test,se.fit=TRUE)
plot(test$MEDV,col="lightblue",
pch=15,xlab=expression("num"),ylab="MEDV",
main="Model1:Predicting results of MEDV")
lines(test.pred$fit,col="blue")
estimateError1 <- (test$MEDV-test.pred$fit)
plot(estimateError1,main="Model1:Predicting errors of MEDV")
test.pred <- predict(lm2,newdata= test,se.fit=TRUE)
par(mfrow=c(1,1))
plot(test$MEDV,col="lightblue",
pch=15,xlab=expression("num"),ylab="MEDV",
main="Model2:Predicting results of MEDV")
lines(test.pred$fit,col="blue")
estimateError2 <- (test$MEDV-test.pred$fit)
plot(estimateError2,main="Model2:Predicting errors of MEDV")
